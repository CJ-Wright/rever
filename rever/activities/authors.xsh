"""Activity for keeping a contributors listing."""
import os
import re
import sys

from xonsh.tools import print_color

from rever import vcsutils
from rever.activity import Activity
from rever.tools import eval_version, replace_in_file

DEFAULT_HEADER = """All of the people who have made at least one contribution to $PROJECT
"""


class Authors(Activity):
    """Manages keeping a contributors listing up-to-date.

    This activity may be configured with the following envionment variables:

    :$AUTHORS_FILENAME: str, path to input file. The default is 'AUTHORS'.
    :$AUTHORS_HEADER: str or callable, This value goes at the top of the
        authors file. The default value is:

        .. code-block:: rst

            All of the people who have made at least one contribution to $PROJECT

        This is evaluated in the current environment.
    :$AUTHORS_LATEST: str, file to write just the latest contribuors to, i.e.
        this is the listing of the contributors for just this release.
        This defaults to ``$REVER_DIR/LATEST-AUTHORS``. This is evaluated
        in the current environment.
    :$AUTHORS_METADATA: str, path to YAML file that stores author metadata.
        The default is '.authors.yml'. This is evaluated in the current environment.
        This file has the following format:

        .. code-block:: yaml

            # required fields
            - name: Princess Buttercup
              email: buttercup@florin.gov

              # optional fields
              github: bcup
              aliases:
                - Buttercup
                - beecup
              alternate_emails:
                - b.cup@gmail.com

              # autogenerated fields
              num_commits: 1000
              first_commit: '1987-09-25'
            - name: Westley
              email: westley@gamil.com
              github: westley
              aliases:
                - Dread Pirate Roberts
              alternate_emails:
                - dpr@pirates.biz
    """

    def __init__(self, *, deps=frozenset()):
        super().__init__(name='authors', deps=deps, func=self._func,
                         desc="Manages keeping a contributors listing up-to-date.",
                         setup=self.setup_func)

    def _func(self, filename='AUTHORS',
              header=DEFAULT_HEADER,
              latest='$REVER_DIR/LATEST-AUTHORS',
              metadata='.authors.yml',
              ):
        header = eval_version(header)
        latest = eval_version(latest)
        # TODO Update authors
        vcsutils.commit('Updated AUTHORS for ' + $VERSION)

    def setup_func(self):
        """Initializes the authors activity by (re-)starting an authors file
        from the current repo.
        """
        # get vars from env
        news = ${...}.get('AUTHORS_METADATA', '.authors.yml')
        template_file = ${...}.get('CHANGELOG_TEMPLATE', 'TEMPLATE')
        template_file = os.path.join(news, template_file)
        changelog_file = ${...}.get('CHANGELOG_FILENAME', 'CHANGELOG')
        # run saftey checks
        template_exists = os.path.isfile(template_file)
        changelog_exists = os.path.isfile(changelog_file)
        msgs = []
        if template_exists:
            msgs.append('Template file {0!r} exists'.format(template_file))
        if changelog_exists:
            msgs.append('Changelog file {0!r} exists'.format(changelog_file))
        if len(msgs) > 0:
            print_color('{RED}' + ' AND '.join(msgs) + '{NO_COLOR}',
                        file=sys.stderr)
            if $REVER_FORCED:
                print_color('{RED}rever forced, overwriting files!{NO_COLOR}',
                            file=sys.stderr)
            else:
                print_color('{RED}Use the --force option to force the creation '
                            'of the changelog files.{NO_COLOR}',
                            file=sys.stderr)
                return False
        # actually create files
        os.makedirs(news, exist_ok=True)
        with open(template_file, 'w') as f:
            f.write(NEWS_TEMPLATE)
        with open(changelog_file, 'w') as f:
            s = INITIAL_CHANGELOG.format(PROJECT=$PROJECT,
                                         bars='='*(len($PROJECT) + 11))
            f.write(s)
        return True
